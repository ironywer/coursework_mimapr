package main

import (
	"bufio"
	"context"
	"fmt"
	"io"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	libp2p "github.com/libp2p/go-libp2p"
	host "github.com/libp2p/go-libp2p/core/host"
	network "github.com/libp2p/go-libp2p/core/network"
	peerstore "github.com/libp2p/go-libp2p/core/peer"
	ma "github.com/multiformats/go-multiaddr"
)

var styleFile = "style.pt" // –§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∏–ª—è

// sentStyle –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –¥–ª—è –∫–∞–∫–∏—Ö –ø–∏—Ä–æ–≤ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∏–ª—è.
var sentStyle = make(map[peerstore.ID]bool)

// saveStreamToFile —á–∏—Ç–∞–µ—Ç –≤–µ—Å—å –ø–æ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
func saveStreamToFile(s network.Stream, path string) error {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	dir := filepath.Dir(path)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return err
	}

	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = io.Copy(file, s)
	return err
}

// isImageFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
func isImageFile(file fs.DirEntry) bool {
	name := strings.ToLower(file.Name())
	return strings.HasSuffix(name, ".jpg") ||
		strings.HasSuffix(name, ".jpeg") ||
		strings.HasSuffix(name, ".png")
}

func main() {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: "initiator" –∏–ª–∏ "processor" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é initiator)
	mode := "initiator"
	if len(os.Args) > 1 {
		mode = os.Args[1]
	}
	fmt.Println("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", mode)

	// –°–æ–∑–¥–∞–µ–º P2P-—É–∑–µ–ª —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ—Ä—Ç–æ–º
	h, err := libp2p.New(libp2p.ListenAddrStrings("/ip4/0.0.0.0/tcp/0"))
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("üì° –£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω —Å –∞–¥—Ä–µ—Å–∞–º–∏:")
	for _, addr := range h.Addrs() {
		fmt.Printf(" - %s/p2p/%s\n", addr, h.ID().String())
	}
	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ Peerstore
	selfInfo := peerstore.AddrInfo{ID: h.ID(), Addrs: h.Addrs()}
	h.Peerstore().AddAddrs(selfInfo.ID, selfInfo.Addrs, time.Hour)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap-—Å–µ—Ä–≤–µ—Ä—É
	bootstrapAddrStr, err := os.ReadFile("bootstrap.txt")
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bootstrap.txt:", err)
	}
	bootstrapAddr := strings.TrimSpace(string(bootstrapAddrStr))
	maddr, err := ma.NewMultiaddr(bootstrapAddr)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bootstrap-–∞–¥—Ä–µ—Å–∞:", err)
	}
	bootstrapInfo, err := peerstore.AddrInfoFromP2pAddr(maddr)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ PeerInfo:", err)
	}
	err = h.Connect(context.Background(), *bootstrapInfo)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:", err)
	}
	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É:", bootstrapInfo.ID)

	// –ï—Å–ª–∏ —Ä–µ–∂–∏–º processor, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∏–ª—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	if mode == "processor" {
		h.SetStreamHandler("/receive-style/1.0.0", handleReceiveStyle)
		h.SetStreamHandler("/receive-image/1.0.0", handleReceiveImage)
		fmt.Println("üîß –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è /receive-style/1.0.0 –∏ /receive-image/1.0.0 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
		// –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
		select {}
	}

	// –†–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞:
	// 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª—å
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("\nüñå –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é-—Å—Ç–∏–ª—é: ")
	styleImgPath, _ := reader.ReadString('\n')
	styleImgPath = strings.TrimSpace(styleImgPath)

	fmt.Println("‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å—Ç–∏–ª—è...")
	cmd := exec.Command("python3", "style_transfer.py", "extract-style", styleImgPath, styleFile)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∏–ª—è:", err)
	}
	fmt.Println("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤", styleFile)

	// 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
	fmt.Print("\nüìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: ")
	dirPath, _ := reader.ReadString('\n')
	dirPath = strings.TrimSpace(dirPath)
	files, err := os.ReadDir(dirPath)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏:", err)
	}

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω) –∏ —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	for _, file := range files {
		if file.IsDir() || !isImageFile(file) {
			continue
		}
		imagePath := filepath.Join(dirPath, file.Name())

		receiverID, receiverAddrs := requestPeer(h, *bootstrapInfo)
		if receiverID == "" {
			fmt.Println("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∞–π–ª–∞:", file.Name())
			continue
		}
		receiverInfo := peerstore.AddrInfo{ID: receiverID, Addrs: receiverAddrs}
		h.Peerstore().AddAddrs(receiverInfo.ID, receiverInfo.Addrs, time.Hour)

		// –ï—Å–ª–∏ —Å—Ç–∏–ª—å –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
		if !sentStyle[receiverID] {
			sendStyle(h, receiverInfo, styleFile)
			sentStyle[receiverID] = true
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º %s ‚ûú %s...\n", file.Name(), receiverID)
		sendImage(h, receiverInfo, imagePath)
	}

	fmt.Println("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
	select {}
}

// –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–∏—Ä–∞ —É —Å–µ—Ä–≤–µ—Ä–∞
func requestPeer(h host.Host, server peerstore.AddrInfo) (peerstore.ID, []ma.Multiaddr) {
	stream, err := h.NewStream(context.Background(), server.ID, "/request-peer/1.0.0")
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", err)
		return "", nil
	}
	defer stream.Close()

	buf := make([]byte, 1024)
	n, err := stream.Read(buf)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", err)
		return "", nil
	}
	resp := string(buf[:n])
	if resp == "NO_PEER" {
		return "", nil
	}
	parts := strings.Split(resp, "|")
	if len(parts) < 2 {
		return "", nil
	}
	peerID, _ := peerstore.Decode(parts[0])
	var addrs []ma.Multiaddr
	for _, s := range strings.Split(parts[1], ",") {
		a, err := ma.NewMultiaddr(s)
		if err == nil {
			addrs = append(addrs, a)
		}
	}
	return peerID, addrs
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-style/1.0.0"
func sendStyle(h host.Host, receiver peerstore.AddrInfo, stylePath string) {
	file, err := os.Open(stylePath)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è:", err)
		return
	}
	defer file.Close()
	stream, err := h.NewStream(context.Background(), receiver.ID, "/receive-style/1.0.0")
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–ª—è:", err)
		return
	}
	defer stream.Close()
	_, err = stream.Write([]byte("STYLE\n"))
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∏–ª—è:", err)
		return
	}
	_, err = io.Copy(stream, file)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è:", err)
		return
	}
	fmt.Println("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∏–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é:", receiver.ID)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-image/1.0.0"
func sendImage(h host.Host, receiver peerstore.AddrInfo, imagePath string) {
	file, err := os.Open(imagePath)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	defer file.Close()
	stream, err := h.NewStream(context.Background(), receiver.ID, "/receive-image/1.0.0")
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	defer stream.Close()
	_, err = stream.Write([]byte("IMAGE\n"))
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	_, err = io.Copy(stream, file)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	fmt.Println("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", filepath.Base(imagePath))
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-image-result/1.0.0"
func receiveProcessedImage(s network.Stream) {
	defer s.Close()
	peerID := s.Conn().RemotePeer().String()
	timestamp := time.Now().UnixNano()
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É processed_images
	dir := "processed_images"
	os.MkdirAll(dir, 0755)
	fileName := fmt.Sprintf("%s/processed_%s_%d.jpg", dir, peerID, timestamp)
	file, err := os.Create(fileName)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
		return
	}
	defer file.Close()
	_, err = io.Copy(file, s)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	fmt.Println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫:", fileName)
}

// ================= –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ =================


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-style/1.0.0"
func handleReceiveStyle(s network.Stream) {
	defer s.Close()
	reader := bufio.NewReader(s)

	// –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	header, err := reader.ReadString('\n')
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∏–ª—è:", err)
		return
	}
	header = strings.TrimSpace(header)
	if header != "STYLE" {
		log.Println("‚ùå –û–∂–∏–¥–∞–ª—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'STYLE', –ø–æ–ª—É—á–µ–Ω–æ:", header)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
	dir := "received_styles"
	os.MkdirAll(dir, 0755)
	fileName := fmt.Sprintf("%s/received_style_%d.pt", dir, time.Now().UnixNano())
	err = saveReaderToFile(reader, fileName)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è:", err)
		return
	}
	fmt.Println("üé® –§–∞–π–ª —Å—Ç–∏–ª—è –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫:", fileName)
	// –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π styleFile –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	styleFile = fileName
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-image/1.0.0"
func handleReceiveImage(s network.Stream) {
	defer s.Close()
	// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤ bufio.Reader
	reader := bufio.NewReader(s)
	// –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–∂–∏–¥–∞–µ—Ç—Å—è "IMAGE")
	header, err := reader.ReadString('\n')
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞:", err)
		return
	}
	header = strings.TrimSpace(header)
	if header != "IMAGE" {
		log.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–∂–∏–¥–∞–µ—Ç—Å—è IMAGE, –ø–æ–ª—É—á–µ–Ω–æ:", header)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≤ –ø–∞–ø–∫–µ "received_images"
	dir := "received_images"
	os.MkdirAll(dir, 0755)
	tmpIn := fmt.Sprintf("%s/received_%d.jpg", dir, time.Now().UnixNano())
	err = saveReaderToFile(reader, tmpIn)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	fmt.Println("üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:", tmpIn)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ styleFile
	dirOut := "processed_images"
	os.MkdirAll(dirOut, 0755)
	tmpOut := fmt.Sprintf("%s/styled_%d.jpg", dirOut, time.Now().UnixNano())
	cmd := exec.Command("python3", "style_transfer.py", "stylize", tmpIn, styleFile, tmpOut)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	fmt.Println("‚è≥ –ó–∞–ø—É—Å–∫ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è", tmpIn)
	if err := cmd.Run(); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:", err)
		return
	}
	fmt.Println("üñº –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", tmpOut)
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-image-result/1.0.0"
	sendProcessedImage(s.Conn().RemotePeer(), tmpOut)
	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	os.Remove(tmpIn)
	os.Remove(tmpOut)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ bufio.Reader –≤ —Ñ–∞–π–ª
func saveReaderToFile(r *bufio.Reader, path string) error {
	dir := filepath.Dir(path)
	os.MkdirAll(dir, 0755)
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()
	_, err = io.Copy(file, r)
	return err
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞)
func sendProcessedImage(receiver peerstore.ID, filePath string) {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–æ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	h, err := libp2p.New(libp2p.ListenAddrStrings("/ip4/0.0.0.0/tcp/0"))
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
		return
	}
	defer h.Close()
	stream, err := h.NewStream(context.Background(), receiver, "/receive-image-result/1.0.0")
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
		return
	}
	defer stream.Close()
	file, err := os.Open(filePath)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", err)
		return
	}
	defer file.Close()
	_, err = io.Copy(stream, file)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	fmt.Println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ:", filePath)
}
