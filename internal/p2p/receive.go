package p2p

import (
	"bufio"
	"coursework_mimapr/internal/style"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	network "github.com/libp2p/go-libp2p/core/network"
	ma "github.com/multiformats/go-multiaddr"
)

var styleFile = "style.pt" // –§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∏–ª—è

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-image-result/1.0.0"
func ReceiveProcessedImage(s network.Stream) {
	defer s.Close()
	peerID := s.Conn().RemotePeer().String()
	timestamp := time.Now().UnixNano()
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É processed_images
	dir := "processed_images"
	os.MkdirAll(dir, 0755)
	fileName := fmt.Sprintf("%s/processed_%s_%d.jpg", dir, peerID, timestamp)
	file, err := os.Create(fileName)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
		return
	}
	defer file.Close()
	_, err = io.Copy(file, s)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	fmt.Println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫:", fileName)
}

// ================= –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ =================

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-style/1.0.0"
func HandleReceiveStyle(s network.Stream) {
	defer s.Close()
	reader := bufio.NewReader(s)

	// –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	header, err := reader.ReadString('\n')
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∏–ª—è:", err)
		return
	}
	header = strings.TrimSpace(header)
	if header != "STYLE" {
		log.Println("‚ùå –û–∂–∏–¥–∞–ª—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'STYLE', –ø–æ–ª—É—á–µ–Ω–æ:", header)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
	dir := "received_styles"
	os.MkdirAll(dir, 0755)
	fileName := fmt.Sprintf("%s/received_style_%d.pt", dir, time.Now().UnixNano())
	err = SaveReaderToFile(reader, fileName)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è:", err)
		return
	}
	fmt.Println("üé® –§–∞–π–ª —Å—Ç–∏–ª—è –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫:", fileName)
	// –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π styleFile –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	styleFile = fileName
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É "/receive-image/1.0.0"
func HandleReceiveImage(s network.Stream) {
	defer s.Close()
	// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤ bufio.Reader
	reader := bufio.NewReader(s)
	// –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–∂–∏–¥–∞–µ—Ç—Å—è "IMAGE")
	header, err := reader.ReadString('\n')
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞:", err)
		return
	}
	header = strings.TrimSpace(header)
	if header != "IMAGE" {
		log.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–∂–∏–¥–∞–µ—Ç—Å—è IMAGE, –ø–æ–ª—É—á–µ–Ω–æ:", header)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≤ –ø–∞–ø–∫–µ "received_images"
	dir := "received_images"
	os.MkdirAll(dir, 0755)
	tmpIn := fmt.Sprintf("%s/received_%d.jpg", dir, time.Now().UnixNano())
	err = SaveReaderToFile(reader, tmpIn)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err)
		return
	}
	fmt.Println("üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:", tmpIn)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ styleFile
	dirOut := "processed_images"
	os.MkdirAll(dirOut, 0755)
	tmpOut := fmt.Sprintf("%s/styled_%d.jpg", dirOut, time.Now().UnixNano())
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞–¥—Ä–µ—Å–∞–º
	addrs := []ma.Multiaddr{s.Conn().RemoteMultiaddr()}

	cmd := exec.Command(style.GetPythonCommand(), "style_transfer.py", "stylize", tmpIn, styleFile, tmpOut)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	fmt.Println("‚è≥ –ó–∞–ø—É—Å–∫ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è", tmpIn)
	if err := cmd.Run(); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:", err)
		SendProcessedImage(s.Conn().RemotePeer(), addrs, "", true, "–û—à–∏–±–∫–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
		os.Remove(tmpIn)
		return
	}
	fmt.Println("üñº –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", tmpOut)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	SendProcessedImage(s.Conn().RemotePeer(), addrs, tmpOut, false, "")

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	os.Remove(tmpIn)
	os.Remove(tmpOut)
}

// SaveStreamToFile —á–∏—Ç–∞–µ—Ç –≤–µ—Å—å –ø–æ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
func SaveStreamToFile(s network.Stream, path string) error {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	dir := filepath.Dir(path)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return err
	}

	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = io.Copy(file, s)
	return err
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ bufio.Reader –≤ —Ñ–∞–π–ª
func SaveReaderToFile(r *bufio.Reader, path string) error {
	dir := filepath.Dir(path)
	os.MkdirAll(dir, 0755)
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()
	_, err = io.Copy(file, r)
	return err
}
