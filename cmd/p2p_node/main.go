package main

import (
	"bufio"
	"context"
	p2p "coursework_mimapr/internal/p2p"
	"coursework_mimapr/internal/style"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	libp2p "github.com/libp2p/go-libp2p"
	network "github.com/libp2p/go-libp2p/core/network"
	peerstore "github.com/libp2p/go-libp2p/core/peer"
	ma "github.com/multiformats/go-multiaddr"
)

var styleFile = "style.pt" // –§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∏–ª—è

// sentStyle –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –¥–ª—è –∫–∞–∫–∏—Ö –ø–∏—Ä–æ–≤ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∏–ª—è.
var sentStyle = make(map[peerstore.ID]bool)

func main() {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: "initiator" –∏–ª–∏ "processor" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é initiator)
	mode := "initiator"
	if len(os.Args) > 1 {
		mode = os.Args[1]
	}
	fmt.Println("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", mode)

	// –°–æ–∑–¥–∞–µ–º P2P-—É–∑–µ–ª —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ—Ä—Ç–æ–º
	h, err := libp2p.New(libp2p.ListenAddrStrings("/ip4/0.0.0.0/tcp/0"))
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("üì° –£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω —Å –∞–¥—Ä–µ—Å–∞–º–∏:")
	for _, addr := range h.Addrs() {
		fmt.Printf(" - %s/p2p/%s\n", addr, h.ID().String())
	}
	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ Peerstore
	selfInfo := peerstore.AddrInfo{ID: h.ID(), Addrs: h.Addrs()}
	h.Peerstore().AddAddrs(selfInfo.ID, selfInfo.Addrs, time.Hour)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap-—Å–µ—Ä–≤–µ—Ä—É
	bootstrapAddrStr, err := os.ReadFile("bootstrap.txt")
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bootstrap.txt:", err)
	}
	bootstrapAddr := strings.TrimSpace(string(bootstrapAddrStr))
	maddr, err := ma.NewMultiaddr(bootstrapAddr)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bootstrap-–∞–¥—Ä–µ—Å–∞:", err)
	}
	bootstrapInfo, err := peerstore.AddrInfoFromP2pAddr(maddr)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ PeerInfo:", err)
	}
	err = h.Connect(context.Background(), *bootstrapInfo)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:", err)
	}
	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É:", bootstrapInfo.ID)

	// –ï—Å–ª–∏ —Ä–µ–∂–∏–º processor, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∏–ª—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	if mode == "processor" {
		h.SetStreamHandler("/receive-style/1.0.0", p2p.HandleReceiveStyle)
		h.SetStreamHandler("/receive-image/1.0.0", p2p.MakeReceiveImageHandler(h))
		fmt.Println("üîß –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è /receive-style/1.0.0 –∏ /receive-image/1.0.0 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
		// –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
		select {}
	} else {
		h.SetStreamHandler("/receive-image-result/1.0.0", func(s network.Stream) {
			defer s.Close()
			reader := bufio.NewReader(s)

			header, err := reader.ReadString('\n')
			if err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
				return
			}
			header = strings.TrimSpace(header)

			if header == "ERROR" {
				msg, _ := reader.ReadString('\n')
				log.Println("‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ:", strings.TrimSpace(msg))
				return
			}

			if header == "IMAGE" {
				timestamp := time.Now().UnixNano()
				dir := "processed_images"
				os.MkdirAll(dir, 0755)
				fileName := fmt.Sprintf("%s/styled_%d.jpg", dir, timestamp)
				file, err := os.Create(fileName)
				if err != nil {
					log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
					return
				}
				defer file.Close()
				_, err = io.Copy(file, reader)
				if err != nil {
					log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
					return
				}
				log.Println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω:", fileName)
			}
		})

	}
	// –†–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞:
	// 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª—å
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("\nüñå –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é-—Å—Ç–∏–ª—é: ")
	styleImgPath, _ := reader.ReadString('\n')
	styleImgPath = strings.TrimSpace(styleImgPath)

	fmt.Println("‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å—Ç–∏–ª—è...")
	cmd := exec.Command(style.GetPythonCommand(), "style_transfer.py", "extract-style", styleImgPath, styleFile)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∏–ª—è:", err)
	}
	fmt.Println("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤", styleFile)

	// 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
	fmt.Print("\nüìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: ")
	dirPath, _ := reader.ReadString('\n')
	dirPath = strings.TrimSpace(dirPath)
	files, err := os.ReadDir(dirPath)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏:", err)
	}

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω) –∏ —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	for _, file := range files {
		if file.IsDir() || !style.IsImageFile(file) {
			continue
		}
		imagePath := filepath.Join(dirPath, file.Name())

		receiverID, receiverAddrs := p2p.RequestPeer(h, *bootstrapInfo)
		if receiverID == "" {
			fmt.Println("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∞–π–ª–∞:", file.Name())
			continue
		}
		receiverInfo := peerstore.AddrInfo{
			ID:    receiverID,
			Addrs: receiverAddrs,
		}
		h.Peerstore().AddAddrs(receiverInfo.ID, receiverInfo.Addrs, time.Hour)

		err = h.Connect(context.Background(), receiverInfo)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
			return
		}
		// –ï—Å–ª–∏ —Å—Ç–∏–ª—å –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
		if !sentStyle[receiverID] {
			p2p.SendStyle(h, receiverInfo, styleFile)
			sentStyle[receiverID] = true
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º %s ‚ûú %s...\n", file.Name(), receiverID)
		p2p.SendImage(h, receiverInfo, imagePath)
	}

	fmt.Println("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
	select {}
}
